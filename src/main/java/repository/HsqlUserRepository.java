package repository;

import db.HsqldbConnection;
import domain.ApplicationUser;
import domain.UserDetails;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class HsqlUserRepository implements ApplicationUserRepository {

	private Connection connection;

	private static final String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS USER " +
			"(id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY , username VARCHAR(20), password VARCHAR(20), " +
			"email VARCHAR(20), role VARCHAR(20))";
	private static final String FIND_BY_USERNAME = "SELECT * FROM USER WHERE username=?";
	private static final String ADD_USER = "INSERT INTO USER (username, password, email, role) VALUES(?,?,?,?) ";
	private static final String GET_ALL = "SELECT username, role FROM user";
	private static final String UPDATE_TO_PREMIUM = "UPDATE user SET role=? WHERE username=?";

	public HsqlUserRepository() {
		connection = HsqldbConnection.getConnection();
		try {
			Statement statement = connection.createStatement();
			statement.executeUpdate(CREATE_TABLE);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public ApplicationUser findByUsername(String username) {
		ApplicationUser user = new ApplicationUser();
		try {
			PreparedStatement statement = connection.prepareStatement(FIND_BY_USERNAME);
			statement.setString(1, username);
			ResultSet rs = statement.executeQuery();

			if (rs.next()) {
				user.setUsername(rs.getString("username"));
				user.setPassword(rs.getString("password"));
				user.setEmail(rs.getString("email"));
				user.setRole(rs.getString("role"));
			} else {
				return null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return user;
	}

	public void add(ApplicationUser user) {
		try {
			PreparedStatement statement = connection.prepareStatement(ADD_USER);
			statement.setString(1, user.getUsername());
			statement.setString(2, user.getPassword());
			statement.setString(3, user.getEmail());
			statement.setString(4, user.getRole());
			statement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<UserDetails> getAll() {
		List<UserDetails> userDetails = new ArrayList<UserDetails>();
		try {
			PreparedStatement statement = connection.prepareStatement(GET_ALL);
			ResultSet rs = statement.executeQuery();

			while (rs.next()) {
				UserDetails user = new UserDetails();
				user.setUsername(rs.getString("username"));
				user.setRole(rs.getString("role"));
				userDetails.add(user);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return userDetails;
	}

	public void addAdmin() {
		ApplicationUser user = new ApplicationUser();
		user.setUsername("admin");
		user.setPassword("admin");
		user.setEmail("admin@admin.pl");
		user.setRole("ADMIN");

		add(user);
	}

	public void updateToPremium(String username) {
		try {
			PreparedStatement statement = connection.prepareStatement(UPDATE_TO_PREMIUM);
			statement.setString(1, "PREMIUM");
			statement.setString(2, username);
			statement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void removePremium(String username) {
		try {
			PreparedStatement statement = connection.prepareStatement(UPDATE_TO_PREMIUM);
			statement.setString(1, "USER");
			statement.setString(2, username);
			statement.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
